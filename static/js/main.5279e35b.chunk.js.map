{"version":3,"sources":["components/TextField/TextField.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["URLs","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","isError","errorMessage","ImgUrl","ImdbUrl","test","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","toTrim","string","trim","count","setCount","newMovie","setNewMovie","isDisabled","handleSubmit","preventDefault","onSubmit","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5279e35b.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nenum URLs {\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n}\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  let isError = false;\n  let errorMessage = '';\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  if (name === URLs.ImgUrl || name === URLs.ImdbUrl) {\n    isError = touched && required && !pattern.test(value);\n    errorMessage = `Please enter valid URL for ${label}`;\n  }\n\n  if (!value) {\n    isError = touched && required && !value;\n    errorMessage = `${label} is required`;\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': isError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {isError && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable max-len */\nimport { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void,\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n\n  function toTrim(string: string) {\n    return string.trim();\n  }\n\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMovie] = useState<Movie>({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const isDisabled = !toTrim(newMovie.title)\n    || !toTrim(newMovie.imgUrl)\n    || !toTrim(newMovie.imdbUrl)\n    || !toTrim(newMovie.imdbId);\n\n  const reset = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n    setCount(count + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newMovie.title || !newMovie.imgUrl || !newMovie.imdbUrl || !newMovie.imdbId) {\n      return;\n    }\n\n    onAdd(newMovie);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={event => handleSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={(value) => setNewMovie({ ...newMovie, title: value })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={(value) => setNewMovie({ ...newMovie, description: value })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={(value) => setNewMovie({ ...newMovie, imgUrl: value })}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={(value) => setNewMovie({ ...newMovie, imdbUrl: value })}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={(value) => setNewMovie({ ...newMovie, imdbId: value })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}